definitions:
  dto.CreateCarModelCommentRequest:
    properties:
      carModelId:
        type: integer
      message:
        maxLength: 100
        type: string
      userId:
        type: integer
    required:
    - carModelId
    - message
    type: object
  dto.CreateCarModelImageRequest:
    properties:
      carModelId:
        type: integer
      imageId:
        type: integer
      isMainImage:
        type: boolean
    required:
    - carModelId
    - imageId
    type: object
  dto.CreateCarModelPriceHistoryRequest:
    properties:
      carModelYearId:
        type: integer
      price:
        type: number
      priceAt:
        type: string
    required:
    - carModelYearId
    - price
    - priceAt
    type: object
  dto.CreateCarModelPropertyRequest:
    properties:
      carModelId:
        type: integer
      propertyId:
        type: integer
      value:
        maxLength: 100
        type: string
    required:
    - carModelId
    - propertyId
    - value
    type: object
  dto.CreateCarModelYearRequest:
    properties:
      carModelId:
        type: integer
      persianYearId:
        type: integer
    required:
    - carModelId
    - persianYearId
    type: object
  dto.CreateCarTypeRequest:
    properties:
      name:
        maxLength: 15
        minLength: 3
        type: string
    required:
    - name
    type: object
  dto.CreateCityRequest:
    properties:
      countryId:
        type: integer
      name:
        maxLength: 20
        minLength: 3
        type: string
    required:
    - countryId
    - name
    type: object
  dto.CreateColorRequest:
    properties:
      hexCode:
        maxLength: 7
        minLength: 7
        type: string
      name:
        maxLength: 15
        minLength: 3
        type: string
    type: object
  dto.CreateCompanyRequest:
    properties:
      countryId:
        type: integer
      name:
        maxLength: 20
        minLength: 3
        type: string
    required:
    - countryId
    - name
    type: object
  dto.CreateGearboxRequest:
    properties:
      name:
        maxLength: 15
        minLength: 3
        type: string
    required:
    - name
    type: object
  dto.CreatePersianYearRequest:
    properties:
      endAt:
        type: string
      persianTitle:
        maxLength: 4
        minLength: 4
        type: string
      startAt:
        type: string
      year:
        type: integer
    type: object
  dto.CreatePropertyCategoryRequest:
    properties:
      icon:
        maxLength: 1000
        type: string
      name:
        maxLength: 50
        minLength: 3
        type: string
    required:
    - name
    type: object
  dto.CreatePropertyRequest:
    properties:
      categoryId:
        type: integer
      dataType:
        maxLength: 15
        type: string
      description:
        maxLength: 1000
        type: string
      icon:
        maxLength: 1000
        type: string
      name:
        maxLength: 50
        minLength: 3
        type: string
      unit:
        maxLength: 15
        type: string
    required:
    - categoryId
    - name
    type: object
  dto.CreateUpdateCountryRequest:
    properties:
      name:
        maxLength: 20
        minLength: 3
        type: string
    required:
    - name
    type: object
  dto.GetOtpRequest:
    properties:
      mobileNumber:
        maxLength: 11
        minLength: 11
        type: string
    required:
    - mobileNumber
    type: object
  dto.LoginByUsernameRequest:
    properties:
      password:
        minLength: 6
        type: string
      username:
        minLength: 5
        type: string
    required:
    - password
    - username
    type: object
  dto.RegisterLoginByMobileRequest:
    properties:
      mobileNumber:
        maxLength: 11
        minLength: 11
        type: string
      otp:
        maxLength: 6
        minLength: 6
        type: string
    required:
    - mobileNumber
    - otp
    type: object
  dto.RegisterUserByUsernameRequest:
    properties:
      email:
        minLength: 6
        type: string
      firstName:
        minLength: 3
        type: string
      lastName:
        minLength: 6
        type: string
      password:
        minLength: 6
        type: string
      username:
        minLength: 5
        type: string
    required:
    - firstName
    - lastName
    - password
    - username
    type: object
  dto.UpdateCarModelCommentRequest:
    properties:
      message:
        maxLength: 100
        type: string
    required:
    - message
    type: object
  dto.UpdateCarModelImageRequest:
    properties:
      isMainImage:
        type: boolean
    type: object
  dto.UpdateCarModelPriceHistoryRequest:
    properties:
      price:
        type: number
      priceAt:
        type: string
    type: object
  dto.UpdateCarModelPropertyRequest:
    properties:
      value:
        maxLength: 100
        type: string
    required:
    - value
    type: object
  dto.UpdateCarModelRequest:
    properties:
      carTypeId:
        type: integer
      companyId:
        type: integer
      gearboxId:
        type: integer
      name:
        type: string
    type: object
  dto.UpdateCarModelYearRequest:
    properties:
      carModelId:
        type: integer
      persianYearId:
        type: integer
    type: object
  dto.UpdateCarTypeRequest:
    properties:
      name:
        maxLength: 15
        minLength: 3
        type: string
    required:
    - name
    type: object
  dto.UpdateCityRequest:
    properties:
      countryId:
        type: integer
      name:
        maxLength: 20
        minLength: 3
        type: string
    type: object
  dto.UpdateColorRequest:
    properties:
      hexCode:
        maxLength: 7
        minLength: 7
        type: string
      name:
        maxLength: 15
        minLength: 3
        type: string
    type: object
  dto.UpdateCompanyRequest:
    properties:
      countryId:
        type: integer
      name:
        maxLength: 20
        minLength: 3
        type: string
    type: object
  dto.UpdateFileRequest:
    properties:
      description:
        type: string
    type: object
  dto.UpdateGearboxRequest:
    properties:
      name:
        maxLength: 15
        minLength: 3
        type: string
    required:
    - name
    type: object
  dto.UpdatePersianYearRequest:
    properties:
      endAt:
        type: string
      persianTitle:
        maxLength: 4
        minLength: 4
        type: string
      startAt:
        type: string
      year:
        type: integer
    type: object
  dto.UpdatePropertyCategoryRequest:
    properties:
      icon:
        type: string
      name:
        type: string
    type: object
  dto.UpdatePropertyRequest:
    properties:
      categoryId:
        type: integer
      dataType:
        maxLength: 15
        type: string
      description:
        maxLength: 1000
        type: string
      icon:
        maxLength: 1000
        type: string
      name:
        type: string
      unit:
        maxLength: 15
        type: string
    type: object
  filter.Filter:
    properties:
      filterType:
        description: text number
        type: string
      from:
        type: string
      to:
        type: string
      type:
        description: contains notContains equals notEqual startsWith lessThan lessThanOrEqual
          greaterThan greaterThanOrEqual inRange endsWith
        type: string
    type: object
  filter.PaginationInputWithFilter:
    properties:
      filter:
        additionalProperties:
          $ref: '#/definitions/filter.Filter'
        type: object
      pageNumber:
        type: integer
      pageSize:
        type: integer
      sort:
        items:
          $ref: '#/definitions/filter.Sort'
        type: array
    type: object
  filter.Sort:
    properties:
      colId:
        type: string
      sort:
        type: string
    type: object
  handler.personData:
    properties:
      first_name:
        maxLength: 10
        minLength: 4
        type: string
      last_name:
        maxLength: 20
        minLength: 6
        type: string
      mobile_number:
        maxLength: 11
        minLength: 11
        type: string
    required:
    - first_name
    - last_name
    - mobile_number
    type: object
  helper.BaseHttpResponse:
    properties:
      error: {}
      result: {}
      resultCode:
        $ref: '#/definitions/helper.ResultCode'
      success:
        type: boolean
      validationErrors:
        items:
          $ref: '#/definitions/validation.ValidationError'
        type: array
    type: object
  helper.ResultCode:
    enum:
    - 0
    - 40001
    - 40101
    - 40301
    - 40401
    - 42901
    - 42902
    - 50001
    - 50002
    type: integer
    x-enum-varnames:
    - Success
    - ValidationError
    - AuthError
    - ForbiddenError
    - NotFoundError
    - LimiterError
    - OtpLimiterError
    - CustomRecovery
    - InternalError
  validation.ValidationError:
    properties:
      message:
        type: string
      property:
        type: string
      tag:
        type: string
      value:
        type: string
    type: object
info:
  contact: {}
paths:
  /v1/Material/:
    post:
      consumes:
      - application/json
      description: Create a Color
      parameters:
      - description: Create a Color
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateColorRequest'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      security:
      - AuthBearer: []
      summary: Create a Color
      tags:
      - Material
  /v1/Material/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a Color
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: response
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      security:
      - AuthBearer: []
      summary: Delete a Color
      tags:
      - Material
    get:
      consumes:
      - application/json
      description: Get a Color
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      security:
      - AuthBearer: []
      summary: Get a Color
      tags:
      - Material
    put:
      consumes:
      - application/json
      description: Update a Color
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: Update a Color
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateColorRequest'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      security:
      - AuthBearer: []
      summary: Update a Color
      tags:
      - Material
  /v1/Material/get-by-filter:
    post:
      consumes:
      - application/json
      description: Get Material
      parameters:
      - description: Request
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/filter.PaginationInputWithFilter'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      security:
      - AuthBearer: []
      summary: Get Material
      tags:
      - Material
  /v1/car-model-colors/:
    post:
      responses:
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      security:
      - AuthBearer: []
  /v1/car-model-colors/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a CarModelColor
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: response
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      security:
      - AuthBearer: []
      summary: Delete a CarModelColor
      tags:
      - CarModelColors
    get:
      responses:
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      security:
      - AuthBearer: []
    put:
      responses:
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      security:
      - AuthBearer: []
  /v1/car-model-colors/get-by-filter:
    post:
      responses:
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      security:
      - AuthBearer: []
  /v1/car-model-comments/:
    post:
      consumes:
      - application/json
      description: Create a CarModelComment
      parameters:
      - description: Create a CarModelComment
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateCarModelCommentRequest'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      security:
      - AuthBearer: []
      summary: Create a CarModelComment
      tags:
      - CarModelComments
  /v1/car-model-comments/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a CarModelComment
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: response
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      security:
      - AuthBearer: []
      summary: Delete a CarModelComment
      tags:
      - CarModelComments
    get:
      consumes:
      - application/json
      description: Get a CarModelComment
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      security:
      - AuthBearer: []
      summary: Get a CarModelComment
      tags:
      - CarModelComments
    put:
      consumes:
      - application/json
      description: Update a CarModelComment
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: Update a CarModelComment
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateCarModelCommentRequest'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      security:
      - AuthBearer: []
      summary: Update a CarModelComment
      tags:
      - CarModelComments
  /v1/car-model-comments/get-by-filter:
    post:
      consumes:
      - application/json
      description: Get CarModelComments
      parameters:
      - description: Request
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/filter.PaginationInputWithFilter'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      security:
      - AuthBearer: []
      summary: Get CarModelComments
      tags:
      - CarModelComments
  /v1/car-model-images/:
    post:
      consumes:
      - application/json
      description: Create a CarModelImage
      parameters:
      - description: Create a CarModelImage
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateCarModelImageRequest'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      security:
      - AuthBearer: []
      summary: Create a CarModelImage
      tags:
      - CarModelImages
  /v1/car-model-images/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a CarModelImage
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: response
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      security:
      - AuthBearer: []
      summary: Delete a CarModelImage
      tags:
      - CarModelImages
    get:
      consumes:
      - application/json
      description: Get a CarModelImage
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      security:
      - AuthBearer: []
      summary: Get a CarModelImage
      tags:
      - CarModelImages
    put:
      consumes:
      - application/json
      description: Update a CarModelImage
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: Update a CarModelImage
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateCarModelImageRequest'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      security:
      - AuthBearer: []
      summary: Update a CarModelImage
      tags:
      - CarModelImages
  /v1/car-model-images/get-by-filter:
    post:
      consumes:
      - application/json
      description: Get CarModelImages
      parameters:
      - description: Request
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/filter.PaginationInputWithFilter'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      security:
      - AuthBearer: []
      summary: Get CarModelImages
      tags:
      - CarModelImages
  /v1/car-model-price-histories/:
    post:
      consumes:
      - application/json
      description: Create a CarModelPriceHistory
      parameters:
      - description: Create a CarModelPriceHistory
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateCarModelPriceHistoryRequest'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      security:
      - AuthBearer: []
      summary: Create a CarModelPriceHistory
      tags:
      - CarModelPriceHistories
  /v1/car-model-price-histories/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a CarModelPriceHistory
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: response
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      security:
      - AuthBearer: []
      summary: Delete a CarModelPriceHistory
      tags:
      - CarModelPriceHistories
    get:
      consumes:
      - application/json
      description: Get a CarModelPriceHistory
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      security:
      - AuthBearer: []
      summary: Get a CarModelPriceHistory
      tags:
      - CarModelPriceHistories
    put:
      consumes:
      - application/json
      description: Update a CarModelPriceHistory
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: Update a CarModelPriceHistory
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateCarModelPriceHistoryRequest'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      security:
      - AuthBearer: []
      summary: Update a CarModelPriceHistory
      tags:
      - CarModelPriceHistories
  /v1/car-model-price-histories/get-by-filter:
    post:
      consumes:
      - application/json
      description: Get CarModelPriceHistories
      parameters:
      - description: Request
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/filter.PaginationInputWithFilter'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      security:
      - AuthBearer: []
      summary: Get CarModelPriceHistories
      tags:
      - CarModelPriceHistories
  /v1/car-model-properties/:
    post:
      consumes:
      - application/json
      description: Create a CarModelProperty
      parameters:
      - description: Create a CarModelProperty
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateCarModelPropertyRequest'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      security:
      - AuthBearer: []
      summary: Create a CarModelProperty
      tags:
      - CarModelProperties
  /v1/car-model-properties/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a CarModelProperty
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: response
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      security:
      - AuthBearer: []
      summary: Delete a CarModelProperty
      tags:
      - CarModelProperties
    get:
      consumes:
      - application/json
      description: Get a CarModelProperty
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      security:
      - AuthBearer: []
      summary: Get a CarModelProperty
      tags:
      - CarModelProperties
    put:
      consumes:
      - application/json
      description: Update a CarModelProperty
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: Update a CarModelProperty
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateCarModelPropertyRequest'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      security:
      - AuthBearer: []
      summary: Update a CarModelProperty
      tags:
      - CarModelProperties
  /v1/car-model-properties/get-by-filter:
    post:
      consumes:
      - application/json
      description: Get CarModelProperties
      parameters:
      - description: Request
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/filter.PaginationInputWithFilter'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      security:
      - AuthBearer: []
      summary: Get CarModelProperties
      tags:
      - CarModelProperties
  /v1/car-model-years/:
    post:
      consumes:
      - application/json
      description: Create a CarModelYear
      parameters:
      - description: Create a CarModelYear
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateCarModelYearRequest'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      security:
      - AuthBearer: []
      summary: Create a CarModelYear
      tags:
      - CarModelYears
  /v1/car-model-years/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a CarModelYear
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: response
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      security:
      - AuthBearer: []
      summary: Delete a CarModelYear
      tags:
      - CarModelYears
    get:
      consumes:
      - application/json
      description: Get a CarModelYear
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      security:
      - AuthBearer: []
      summary: Get a CarModelYear
      tags:
      - CarModelYears
    put:
      consumes:
      - application/json
      description: Update a CarModelYear
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: Update a CarModelYear
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateCarModelYearRequest'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      security:
      - AuthBearer: []
      summary: Update a CarModelYear
      tags:
      - CarModelYears
  /v1/car-model-years/get-by-filter:
    post:
      consumes:
      - application/json
      description: Get CarModelYears
      parameters:
      - description: Request
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/filter.PaginationInputWithFilter'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      security:
      - AuthBearer: []
      summary: Get CarModelYears
      tags:
      - CarModelYears
  /v1/car-models/:
    post:
      responses:
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      security:
      - AuthBearer: []
  /v1/car-models/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a CarModel
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: response
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      security:
      - AuthBearer: []
      summary: Delete a CarModel
      tags:
      - CarModels
    get:
      consumes:
      - application/json
      description: Get a CarModel
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: CarModel response
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      security:
      - AuthBearer: []
      summary: Get a CarModel
      tags:
      - CarModels
    put:
      consumes:
      - application/json
      description: Update a CarModel
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: Update a CarModel
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateCarModelRequest'
      responses:
        "200":
          description: CarModel response
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      security:
      - AuthBearer: []
      summary: Update a CarModel
      tags:
      - CarModels
  /v1/car-models/get-by-filter:
    post:
      responses:
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      security:
      - AuthBearer: []
  /v1/car-types/:
    post:
      consumes:
      - application/json
      description: Create a CarType
      parameters:
      - description: Create a CarType
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateCarTypeRequest'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      security:
      - AuthBearer: []
      summary: Create a CarType
      tags:
      - CarTypes
  /v1/car-types/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a CarType
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: response
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      security:
      - AuthBearer: []
      summary: Delete a CarType
      tags:
      - CarTypes
    get:
      consumes:
      - application/json
      description: Get a CarType
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      security:
      - AuthBearer: []
      summary: Get a CarType
      tags:
      - CarTypes
    put:
      consumes:
      - application/json
      description: Update a CarType
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: Update a CarType
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateCarTypeRequest'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      security:
      - AuthBearer: []
      summary: Update a CarType
      tags:
      - CarTypes
  /v1/car-types/get-by-filter:
    post:
      consumes:
      - application/json
      description: Get CarTypes
      parameters:
      - description: Request
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/filter.PaginationInputWithFilter'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      security:
      - AuthBearer: []
      summary: Get CarTypes
      tags:
      - CarTypes
  /v1/cities/:
    post:
      consumes:
      - application/json
      description: Create a City
      parameters:
      - description: Create a City
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateCityRequest'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      security:
      - AuthBearer: []
      summary: Create a City
      tags:
      - Cities
  /v1/cities/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a City
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: response
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      security:
      - AuthBearer: []
      summary: Delete a City
      tags:
      - Cities
    get:
      consumes:
      - application/json
      description: Get a City
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      security:
      - AuthBearer: []
      summary: Get a City
      tags:
      - Cities
    put:
      consumes:
      - application/json
      description: Update a City
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: Update a City
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateCityRequest'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      security:
      - AuthBearer: []
      summary: Update a City
      tags:
      - Cities
  /v1/cities/get-by-filter:
    post:
      consumes:
      - application/json
      description: Get Cities
      parameters:
      - description: Request
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/filter.PaginationInputWithFilter'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      security:
      - AuthBearer: []
      summary: Get Cities
      tags:
      - Cities
  /v1/colors/:
    post:
      consumes:
      - application/json
      description: Create a Color
      parameters:
      - description: Create a Color
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateColorRequest'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      security:
      - AuthBearer: []
      summary: Create a Color
      tags:
      - Colors
  /v1/colors/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a Color
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: response
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      security:
      - AuthBearer: []
      summary: Delete a Color
      tags:
      - Colors
    get:
      consumes:
      - application/json
      description: Get a Color
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      security:
      - AuthBearer: []
      summary: Get a Color
      tags:
      - Colors
    put:
      consumes:
      - application/json
      description: Update a Color
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: Update a Color
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateColorRequest'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      security:
      - AuthBearer: []
      summary: Update a Color
      tags:
      - Colors
  /v1/colors/get-by-filter:
    post:
      consumes:
      - application/json
      description: Get Colors
      parameters:
      - description: Request
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/filter.PaginationInputWithFilter'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      security:
      - AuthBearer: []
      summary: Get Colors
      tags:
      - Colors
  /v1/companies/:
    post:
      consumes:
      - application/json
      description: Create a Company
      parameters:
      - description: Create a Company
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateCompanyRequest'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      security:
      - AuthBearer: []
      summary: Create a Company
      tags:
      - Companies
  /v1/companies/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a Company
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: response
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      security:
      - AuthBearer: []
      summary: Delete a Company
      tags:
      - Companies
    get:
      consumes:
      - application/json
      description: Get a Company
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      security:
      - AuthBearer: []
      summary: Get a Company
      tags:
      - Companies
    put:
      consumes:
      - application/json
      description: Update a Company
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: Update a Company
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateCompanyRequest'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      security:
      - AuthBearer: []
      summary: Update a Company
      tags:
      - Companies
  /v1/companies/get-by-filter:
    post:
      consumes:
      - application/json
      description: Get Companies
      parameters:
      - description: Request
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/filter.PaginationInputWithFilter'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      security:
      - AuthBearer: []
      summary: Get Companies
      tags:
      - Companies
  /v1/countries/:
    post:
      consumes:
      - application/json
      description: Create a country
      parameters:
      - description: Create a country
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUpdateCountryRequest'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      security:
      - AuthBearer: []
      summary: Create a country
      tags:
      - Countries
  /v1/countries/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a country
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: response
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      security:
      - AuthBearer: []
      summary: Delete a country
      tags:
      - Countries
    get:
      consumes:
      - application/json
      description: Get a country
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      security:
      - AuthBearer: []
      summary: Get a country
      tags:
      - Countries
    put:
      consumes:
      - application/json
      description: Update a country
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: Update a country
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUpdateCountryRequest'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      security:
      - AuthBearer: []
      summary: Update a country
      tags:
      - Countries
  /v1/countries/get-by-filter:
    post:
      consumes:
      - application/json
      description: Get Countries
      parameters:
      - description: Request
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/filter.PaginationInputWithFilter'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      security:
      - AuthBearer: []
      summary: Get Countries
      tags:
      - Countries
  /v1/files/:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: Create a file
      parameters:
      - in: formData
        name: description
        required: true
        type: string
      - description: Create a file
        in: formData
        name: file
        required: true
        type: file
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      security:
      - AuthBearer: []
      summary: Create a file
      tags:
      - Files
  /v1/files/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a file
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: response
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      security:
      - AuthBearer: []
      summary: Delete a file
      tags:
      - Files
    get:
      consumes:
      - application/json
      description: Get a file
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      security:
      - AuthBearer: []
      summary: Get a file
      tags:
      - Files
    put:
      consumes:
      - application/json
      description: Update a file
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: Update a file
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateFileRequest'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      security:
      - AuthBearer: []
      summary: Update a file
      tags:
      - Files
  /v1/files/get-by-filter:
    post:
      consumes:
      - application/json
      description: Get Files
      parameters:
      - description: Request
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/filter.PaginationInputWithFilter'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      security:
      - AuthBearer: []
      summary: Get Files
      tags:
      - Files
  /v1/gearboxes/:
    post:
      consumes:
      - application/json
      description: Create a Gearbox
      parameters:
      - description: Create a Gearbox
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateGearboxRequest'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      security:
      - AuthBearer: []
      summary: Create a Gearbox
      tags:
      - Gearboxes
  /v1/gearboxes/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a Gearbox
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: response
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      security:
      - AuthBearer: []
      summary: Delete a Gearbox
      tags:
      - Gearboxes
    get:
      consumes:
      - application/json
      description: Get a Gearbox
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      security:
      - AuthBearer: []
      summary: Get a Gearbox
      tags:
      - Gearboxes
    put:
      consumes:
      - application/json
      description: Update a Gearbox
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: Update a Gearbox
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateGearboxRequest'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      security:
      - AuthBearer: []
      summary: Update a Gearbox
      tags:
      - Gearboxes
  /v1/gearboxes/get-by-filter:
    post:
      consumes:
      - application/json
      description: Get Gearboxes
      parameters:
      - description: Request
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/filter.PaginationInputWithFilter'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      security:
      - AuthBearer: []
      summary: Get Gearboxes
      tags:
      - Gearboxes
  /v1/health/:
    get:
      consumes:
      - application/json
      description: Health Check
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "400":
          description: Failed
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      summary: Health Check
      tags:
      - health
  /v1/properties/:
    post:
      consumes:
      - application/json
      description: Create a Property
      parameters:
      - description: Create a Property
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/dto.CreatePropertyRequest'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      security:
      - AuthBearer: []
      summary: Create a Property
      tags:
      - Properties
  /v1/properties/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a Property
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: response
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      security:
      - AuthBearer: []
      summary: Delete a Property
      tags:
      - Properties
    get:
      consumes:
      - application/json
      description: Get a Property
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      security:
      - AuthBearer: []
      summary: Get a Property
      tags:
      - Properties
    put:
      consumes:
      - application/json
      description: Update a Property
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: Update a Property
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdatePropertyRequest'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      security:
      - AuthBearer: []
      summary: Update a Property
      tags:
      - Properties
  /v1/properties/get-by-filter:
    post:
      consumes:
      - application/json
      description: Get Properties
      parameters:
      - description: Request
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/filter.PaginationInputWithFilter'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      security:
      - AuthBearer: []
      summary: Get Properties
      tags:
      - Properties
  /v1/property-categories/:
    post:
      consumes:
      - application/json
      description: Create a PropertyCategory
      parameters:
      - description: Create a PropertyCategory
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/dto.CreatePropertyCategoryRequest'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      security:
      - AuthBearer: []
      summary: Create a PropertyCategory
      tags:
      - PropertyCategories
  /v1/property-categories/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a PropertyCategory
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: response
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      security:
      - AuthBearer: []
      summary: Delete a PropertyCategory
      tags:
      - PropertyCategories
    get:
      consumes:
      - application/json
      description: Get a PropertyCategory
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      security:
      - AuthBearer: []
      summary: Get a PropertyCategory
      tags:
      - PropertyCategories
    put:
      consumes:
      - application/json
      description: Update a PropertyCategory
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: Update a PropertyCategory
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdatePropertyCategoryRequest'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      security:
      - AuthBearer: []
      summary: Update a PropertyCategory
      tags:
      - PropertyCategories
  /v1/property-categories/get-by-filter:
    post:
      consumes:
      - application/json
      description: Get PropertyCategories
      parameters:
      - description: Request
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/filter.PaginationInputWithFilter'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      security:
      - AuthBearer: []
      summary: Get PropertyCategories
      tags:
      - PropertyCategories
  /v1/test/binder/body:
    post:
      consumes:
      - application/json
      description: BodyBinder
      parameters:
      - description: person data
        in: body
        name: person
        required: true
        schema:
          $ref: '#/definitions/handler.personData'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/helper.BaseHttpResponse'
            - properties:
                validationErrors: {}
              type: object
        "400":
          description: Failed
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      security:
      - AuthBearer: []
      summary: BodyBinder
      tags:
      - Test
  /v1/test/binder/uri/{id}/{name}:
    post:
      consumes:
      - application/json
      description: BodyBinder
      parameters:
      - description: user id
        in: path
        name: id
        required: true
        type: integer
      - description: user name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/helper.BaseHttpResponse'
            - properties:
                validationErrors: {}
              type: object
        "400":
          description: Failed
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      security:
      - AuthBearer: []
      summary: BodyBinder
      tags:
      - Test
  /v1/test/user/{id}:
    get:
      consumes:
      - application/json
      description: UserById
      parameters:
      - description: user id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "400":
          description: Failed
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      summary: UserById
      tags:
      - Test
  /v1/users/login-by-mobile:
    post:
      consumes:
      - application/json
      description: RegisterLoginByMobileNumber
      parameters:
      - description: RegisterLoginByMobileRequest
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterLoginByMobileRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Success
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "400":
          description: Failed
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "409":
          description: Failed
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      summary: RegisterLoginByMobileNumber
      tags:
      - Users
  /v1/users/login-by-username:
    post:
      consumes:
      - application/json
      description: LoginByUsername
      parameters:
      - description: LoginByUsernameRequest
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/dto.LoginByUsernameRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Success
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "400":
          description: Failed
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "409":
          description: Failed
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      summary: LoginByUsername
      tags:
      - Users
  /v1/users/register-by-username:
    post:
      consumes:
      - application/json
      description: RegisterByUsername
      parameters:
      - description: RegisterUserByUsernameRequest
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterUserByUsernameRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Success
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "400":
          description: Failed
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "409":
          description: Failed
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      summary: RegisterByUsername
      tags:
      - Users
  /v1/users/send-otp:
    post:
      consumes:
      - application/json
      description: Send otp to user
      parameters:
      - description: GetOtpRequest
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/dto.GetOtpRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Success
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "400":
          description: Failed
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "409":
          description: Failed
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      summary: Send otp to user
      tags:
      - Users
  /v1/years/:
    post:
      consumes:
      - application/json
      description: Create a PersianYear
      parameters:
      - description: Create a PersianYear
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/dto.CreatePersianYearRequest'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      security:
      - AuthBearer: []
      summary: Create a PersianYear
      tags:
      - PersianYears
  /v1/years/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a PersianYear
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: response
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      security:
      - AuthBearer: []
      summary: Delete a PersianYear
      tags:
      - PersianYears
    get:
      consumes:
      - application/json
      description: Get a PersianYear
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      security:
      - AuthBearer: []
      summary: Get a PersianYear
      tags:
      - PersianYears
    put:
      consumes:
      - application/json
      description: Update a PersianYear
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: Update a PersianYear
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdatePersianYearRequest'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      security:
      - AuthBearer: []
      summary: Update a PersianYear
      tags:
      - PersianYears
  /v1/years/get-by-filter:
    post:
      consumes:
      - application/json
      description: Get PersianYears
      parameters:
      - description: Request
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/filter.PaginationInputWithFilter'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/helper.BaseHttpResponse'
      security:
      - AuthBearer: []
      summary: Get PersianYears
      tags:
      - PersianYears
securityDefinitions:
  AuthBearer:
    description: Type "Bearer " followed by your token
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
